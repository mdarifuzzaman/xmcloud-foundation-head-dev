<?xml version="1.0" encoding="utf-8"?>

<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/" xmlns:role="http://www.sitecore.net/xmlconfig/role/">
  <sitecore>
    <pipelines>
      <group groupName="layoutService">
        <pipelines>
          <renderJsonRendering>
            <processor patch:instead="*[@type='Sitecore.LayoutService.Presentation.Pipelines.RenderJsonRendering.DetermineRenderingContentsResolver, Sitecore.LayoutService']" type="XmCloudSXAStarter.Pipelines.DetermineRenderingContentsResolver, XmCloudSXAStarter" resolve="true">              
            </processor>
          </renderJsonRendering>        
        </pipelines>
      </group>
    </pipelines>
    <settings>
      <setting name="Media.FileSystemWatcher.BufferSize">
        <patch:attribute name="value">40960</patch:attribute>
      </setting>
      <setting name="XA.LayoutService.ConfigurationName">
        <patch:attribute name="value">default</patch:attribute>
      </setting>
      
    </settings>
    <api>
      <GraphQL>
        <defaults>
          <content>
            <schemaProviders>
              <edgeContentCustom
                type="Sitecore.Services.GraphQL.EdgeSchema.EdgeSchemaProvider, Sitecore.Services.GraphQL.EdgeSchema">
                <!-- 
                                    The template predicate defines which templates will have GraphQL types generated for them. This is NOT a security measure - all fields
                                    that the API key user/authenticated user can access can be queried by name - but can be used to limit the scope of your GraphQL schema.
                                -->
                <templates
                  type="Sitecore.Services.GraphQL.Content.TemplateGeneration.Filters.StandardTemplatePredicate, Sitecore.Services.GraphQL.Content">
                  <database>$(1)</database>
                  <paths hint="list:AddIncludedPath">
                    <foundation>/sitecore/templates/Foundation</foundation>
                    <feature>/sitecore/templates/Feature</feature>
                    <project>/sitecore/templates/Project</project>
                    <userdefined>/sitecore/templates/User Defined</userdefined>
                  </paths>
                  <fieldFilter
                    type="Sitecore.Services.GraphQL.Content.TemplateGeneration.Filters.StandardFieldFilter, Sitecore.Services.GraphQL.Content">
                    <exclusions hint="raw:AddFilter">
                      <!-- 
                                                Remove system fields from the GraphQL types in the strongly typed API (e.g. __Layout)
                                                Wildcards are allowed.
                                            -->
                      <exclude name="__*" />
                      <!--
                                                You can also exclude fields from the schema specifically by field ID
                                            <exclude fieldId="{8FB875EB-3AD3-44FF-87E1-998370CC3199}" />-->
                    </exclusions>
                  </fieldFilter>
                </templates>

                <!-- 
                                    Define the GraphQL root object for the schema (queries, mutations, and subscriptions)
                                    You may use `resolve=true` to activate dependency injection on root fields.
                                    All root fields must inherit from FieldType (EventStreamFieldType for subscriptions)
                                    Fields may optionally implement IContentSchemaRootFieldType to get a Database instance (automatic property is expected)
                                -->
                <queries hint="raw:AddQuery">
                  <query name="item" type="XmCloudSXAStarter.Queries.CustomItemQuery, XmCloudSXAStarter" />
                  <query name="layout" type="XmCloudSXAStarter.Queries.CustomLayoutQuery, XmCloudSXAStarter" />
                  <query name="search" type="Sitecore.Services.GraphQL.EdgeSchema.Queries.SearchQuery, Sitecore.Services.GraphQL.EdgeSchema" />
                  <query name="site" type="Sitecore.Services.GraphQL.EdgeSchema.Queries.SiteQuery, Sitecore.Services.GraphQL.EdgeSchema" />
                </queries>
                <fieldTypeMapping ref="/sitecore/api/GraphQL/defaults/content/fieldTypeMappings/standardTypeMapping" />
              </edgeContentCustom>
            </schemaProviders>
            <fieldTypeMappings>
              <standardTypeMapping type="Sitecore.Services.GraphQL.Content.TemplateGeneration.FieldTypeToGraphQLTypeMapper, Sitecore.Services.GraphQL.Content">
                <typeMapping hint="raw:AddTypeMapping">
                  <map field="multiroot treelist" type="Sitecore.Services.GraphQL.Content.TemplateGeneration.FieldMapping.MultilistFieldTypeFactory, Sitecore.Services.GraphQL.Content" />
                </typeMapping>
              </standardTypeMapping>
            </fieldTypeMappings>
          </content>
        </defaults>
        <endpoints>
          <edgecustom url="/sitecore/api/graph/edgecustom"
                      type="Sitecore.Services.GraphQL.Hosting.GraphQLEndpoint, Sitecore.Services.GraphQL.NetFxHost"
                      resolve="true">
            <url>$(url)</url>
            <enableSubscriptions>false</enableSubscriptions>

            <schema hint="list:AddSchemaProvider">
              <content ref="/sitecore/api/GraphQL/defaults/content/schemaProviders/edgeContentCustom" param1="master" />
            </schema>

            <!-- Determines the security of the service. Defaults are defined in Sitecore.Services.GraphQL.config -->
            <security ref="/sitecore/api/GraphQL/defaults/security/publicService" />

            <!-- Determines how performance is logged for the service. Defaults are defined in Sitecore.Services.GraphQL.config -->
            <performance ref="/sitecore/api/GraphQL/defaults/performance/standard" />

            <!--
                            Cache improves the query performance by caching parsed queries.
                            It is also possible to implement query whitelisting by implementing an authoritative query cache;
                            WhitelistingGraphQLQueryCache is an example of this, capturing queries to files in open mode and allowing only captured queries in whitelist mode.
                        -->
            <cache
              type="Sitecore.Services.GraphQL.Hosting.QueryTransformation.Caching.GraphQLQueryCache, Sitecore.Services.GraphQL.NetFxHost">
              <param desc="name">$(url)</param>
              <param desc="maxSize">10MB</param>
            </cache>

          </edgecustom>
        </endpoints>
      </GraphQL>
    </api>
    <layoutService>
      <configurations>
        <!-- default -->
        <config name="default" patch:instead="*[@name='default']">
          <rendering type="Sitecore.LayoutService.Configuration.DefaultRenderingConfiguration, Sitecore.LayoutService">
            <placeholdersResolver
              type="Sitecore.LayoutService.Placeholders.DynamicPlaceholdersResolver, Sitecore.LayoutService" />
            <itemSerializer
              type="Sitecore.LayoutService.Serialization.ItemSerializers.DefaultItemSerializer, Sitecore.LayoutService"
              resolve="true">
              <AlwaysIncludeEmptyFields>true</AlwaysIncludeEmptyFields>
            </itemSerializer>

            <!-- 
              Custom GraphQLAwareRenderingContentsResolver
              -->
            <renderingContentsResolver
              type="XmCloudSXAStarter.LayoutService.CustomGraphQLAwareRenderingContentsResolver, XmCloudSXAStarter" resolve="true">
              <IncludeServerUrlInMediaUrls>true</IncludeServerUrlInMediaUrls>
            </renderingContentsResolver>

          </rendering>
          <serialization
            type="Sitecore.LayoutService.Configuration.DefaultSerializationConfiguration, Sitecore.LayoutService">
            <transformer type="Sitecore.LayoutService.Serialization.LayoutTransformer, Sitecore.LayoutService"
                         resolve="true" />
          </serialization>
        </config>
        <config name="jss" patch:instead="*[@name='jss']">
          <rendering type="Sitecore.LayoutService.Configuration.DefaultRenderingConfiguration, Sitecore.LayoutService">
            <placeholdersResolver
              type="Sitecore.LayoutService.Placeholders.DynamicPlaceholdersResolver, Sitecore.LayoutService" />
            <itemSerializer
              type="Sitecore.JavaScriptServices.ViewEngine.LayoutService.JssItemSerializer, Sitecore.JavaScriptServices.ViewEngine"
              resolve="true">
              <AlwaysIncludeEmptyFields>true</AlwaysIncludeEmptyFields>
            </itemSerializer>
            <renderingContentsResolver
              type="XmCloudSXAStarter.LayoutService.CustomGraphQLAwareRenderingContentsResolver, XmCloudSXAStarter" resolve="true">
              <IncludeServerUrlInMediaUrls>true</IncludeServerUrlInMediaUrls>
            </renderingContentsResolver>
          </rendering>
          <serialization
            type="Sitecore.JavaScriptServices.ViewEngine.LayoutService.SerializationConfiguration, Sitecore.JavaScriptServices.ViewEngine">
            <transformer type="Sitecore.JavaScriptServices.ViewEngine.LayoutService.Serialization.LayoutTransformer, Sitecore.JavaScriptServices.ViewEngine" resolve="true" />
          </serialization>
        </config>
        <config name="sxa-jss" patch:instead="*[@name='sxa-jss']">
          <requestContext type="Sitecore.LayoutService.Configuration.DefaultRequestContext, Sitecore.LayoutService">
            <databaseName>master</databaseName>
          </requestContext>
          <rendering type="Sitecore.LayoutService.Configuration.DefaultRenderingConfiguration, Sitecore.LayoutService">
            <placeholdersResolver type="Sitecore.XA.JSS.Foundation.Presentation.Placeholders.SxaDynamicPlaceholdersResolver, Sitecore.XA.JSS.Foundation.Presentation" />
            <itemSerializer type="Sitecore.XA.JSS.Foundation.Presentation.Serialization.SxaItemSerializer, Sitecore.XA.JSS.Foundation.Presentation" resolve="true">
              <AlwaysIncludeEmptyFields>true</AlwaysIncludeEmptyFields>
              <IgnoredFields hint="raw:AddField">
                <field desc="Change Frequency">{508C54C0-CD02-4266-8B68-D71F88DE1AA9}</field>
                <field desc="Priority">{76FB6FFD-4487-4028-A1CF-705FBE360CBA}</field>
              </IgnoredFields>
            </itemSerializer>
            <renderingContentsResolver type="XmCloudSXAStarter.LayoutService.CustomRenderingContentsResolver, XmCloudSXAStarter">
              <IncludeServerUrlInMediaUrls>true</IncludeServerUrlInMediaUrls>
            </renderingContentsResolver>
          </rendering>
          <serialization type="Sitecore.LayoutService.Configuration.DefaultSerializationConfiguration, Sitecore.LayoutService">
            <transformer type="Sitecore.LayoutService.Serialization.LayoutTransformer, Sitecore.LayoutService" resolve="true"/>
          </serialization>
        </config>
      </configurations>
    </layoutService>
  </sitecore>
</configuration>